/* Version 0.2 */
#define MAX_SET 30
#define MAX_MOD (MAX_SET * (MAX_SET - 1) + 1)

#define false 0
#define true 1

#define FOREVER for (;;)

#define MAX_ITERATIONS 100000

typedef struct {
    int k;
    int m;
    int low;
    int max_candidate;
    int current;
    int *set;
    int *diffs;
    __global int *counters;
} PUSH_CONTEXT;

int push(int a, PUSH_CONTEXT *pc);
int pop(PUSH_CONTEXT *pc);

// Global counters
#define SOLVED 0
#define SOLUTION_STEPS 1
#define STEPS 2
#define EXIT_K_MAX 3
#define EXIT_PREFIX 4
#define EXIT_CHOICE_1 5
#define EXIT_CHOICE_2 6
#define EXHAUSTED 7
#define ITER_MAX 8
#define PRUNED 9
#define DATA 10

#define inc_counter(index) atomic_inc(&counters[index])
#define add_counter(index, delta) atomic_add(&counters[index], delta)

__kernel void kmain(
    int k,
    int prefix_size,
    __global int *prefix,
    __global int *counters,
    __global int *output)
{
    // TODO: Private memory may be more expensive than local memory...
    int set[MAX_SET];
    int diffs[MAX_MOD];
    PUSH_CONTEXT pc;
    int candidate;

    size_t global_id = get_global_id(0);
    size_t local_id = get_local_id(0);

    if (k > MAX_SET) {
        inc_counter(EXIT_K_MAX);
        return;
    }

    pc.current = 0;
    pc.low = 0;
    pc.set = set;
    pc.diffs = diffs;
    pc.counters = counters;
    pc.k = k;
    pc.m = k * (k - 1) + 1;

    diffs[0] = true;
    // Is it necessary to initialize private memory to 0?
    for (int i = 1; i < MAX_MOD; i++) {
        diffs[i] = 0;
    }

    if (prefix_size == 0) {
        push(0, &pc);
        push(1, &pc);
        prefix_size = 2;
    } else {
        for (int i = 0; i < prefix_size; i++) {
            push(prefix[i], &pc);
        }
    }

    // Prefix must be valid or return error code status.
    if (pc.current != prefix_size) {
        inc_counter(EXIT_PREFIX);
        return;
    }

    int seed = global_id;
    if (!push((seed % (pc.m - 3)) + 3, &pc)) {
        inc_counter(EXIT_CHOICE_1);
        return;
    }

    seed /= pc.m - 3;
    if (!push(seed + 3, &pc)) {
        inc_counter(EXIT_CHOICE_2);
        return;
    }

    candidate = set[pc.current - 1] + pc.low + 1;
    int min_size = pc.current;

    int iterations = 0;
    FOREVER {
        iterations++;
        if (counters[SOLVED]) {
            inc_counter(PRUNED);
            return;
        }

        if (iterations >= MAX_ITERATIONS) {
            inc_counter(ITER_MAX);
            add_counter(STEPS, iterations);
            return;
        }

        // if candidate is feasible, push on
        if (push(candidate, &pc)) {
            if (pc.current == k) {
                int solutions = inc_counter(SOLVED);
                if (solutions == 0) {
                    add_counter(SOLUTION_STEPS, iterations);
                    for (int i = 0; i < k; i++) {
                        output[i] = pc.set[i];
                    }
                }
                add_counter(STEPS, iterations);
                return;
            }
            candidate += pc.low + 1;
            continue;
        }

        // n is not feasible - try next value
        candidate++;

        // Can't work - backtrack
        if (candidate >= pc.max_candidate) {
            // No solution.
            if (pc.current < min_size) {
                inc_counter(EXHAUSTED);
                add_counter(STEPS, iterations);
                return;
            }
            candidate = pop(&pc) + 1;
        }
    }
}

int push(int a, PUSH_CONTEXT *pc) {
    int d;

    if (a >= pc->m) {
        return false;
    }

    for (int i = 0; i < pc->current; i++) {
        d = a - pc->set[i];
        if (d > pc->m / 2) {
            d = pc->m - d;
        }
        if (d < 0 || pc->diffs[d]) {
            for (int j = 0; j < i; j++) {
                d = a - pc->set[j];
                if (d > pc->m / 2) {
                    d = pc->m - d;
                }
                pc->diffs[d] = false;
            }
            return false;
        }
        pc->diffs[d] = true;
    }

    pc->set[pc->current++] = a;

    while (pc->low < pc->m / 2 && pc->diffs[pc->low + 1]) {
        pc->low++;
    }

    pc->max_candidate = pc->m - pc->low - (pc->low + 1) * (pc->k - pc->current - 1);

    return true;
}

int pop(PUSH_CONTEXT *pc) {
    int a = pc->set[--pc->current];

    for (int i = 0; i < pc->current; i++) {
        int d = a - pc->set[i];
        if (d > pc->m / 2) {
            d = pc->m - d;
        }
        pc->diffs[d] = false;
        if (d <= pc->low) {
            pc->low = d - 1;
        }
    }

    pc->max_candidate = pc->m - pc->low - (pc->low + 1) * (pc->k - pc->current - 1);

    return a;
}
